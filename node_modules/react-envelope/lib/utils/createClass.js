'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.default = createClass;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _getDisplayName = require('./getDisplayName');

var _getDisplayName2 = _interopRequireDefault(_getDisplayName);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function createClass(BaseComponent) {
  var EnvelopedComponent = function (_React$Component) {
    _inherits(EnvelopedComponent, _React$Component);

    function EnvelopedComponent(props) {
      _classCallCheck(this, EnvelopedComponent);

      // prepare (initial) state
      var _this = _possibleConstructorReturn(this, (EnvelopedComponent.__proto__ || Object.getPrototypeOf(EnvelopedComponent)).call(this, props));

      if (_this.prepareState) {
        _this.prepareState();
      }

      // prepare lifecycle hooks
      if (_this.prepareLifecycle) {
        _this.prepareLifecycle();
      }
      return _this;
    }

    _createClass(EnvelopedComponent, [{
      key: 'render',
      value: function render() {
        // render with state
        if (this.state) {
          return BaseComponent(this.props, this.createAdvancedState(this.state));
        }

        // render without state
        return BaseComponent(this.props);
      }
    }]);

    return EnvelopedComponent;
  }(_react2.default.Component);

  // static


  EnvelopedComponent.isEnvelopedComponent = true;
  EnvelopedComponent.displayName = 'Enveloped(' + (0, _getDisplayName2.default)(BaseComponent) + ')';
  if (BaseComponent.defaultProps) {
    EnvelopedComponent.defaultProps = BaseComponent.defaultProps;
  }

  return EnvelopedComponent;
}